---
--- Generated by EmmyLua(https://github.com/EmmyLua) in IntelliJ IDEA
--- Created by Will.
--- DateTime: 4/28/2021 11:23 AM
---
-- OOP crafter.

AECrafter = {}
AECrafter.__index = AECrafter

-- constructor method
function AECrafter:new(controller)
    local crafter = {}
    setmetatable(crafter, self)

    crafter.controller = controller
    crafter.cpuTable = initCpus(controller)
    crafter.recipeDB = initRecipes(controller)

    return crafter
end

function AECrafter:craft(recipeName, amount, rush)
    self.cpuTable = self:getCpus()
    local availableCpu = self:setCpu()
    local crafter = self:getCrafter(recipeName)

    if not crafter then
        return "INIT_ERR"
    end

    if not availableCpu then
        return "NO_AVAIL_CPU"
    end

    return crafter.request(amount, rush, availableCpu)
end

function AECrafter:getCpus(controller)
    return map((self.controller.getCpus() or controller), function(cpu)
        if (type(cpu) == 'table') then
            return {cpu.name, cpu.busy}
        end
    end)
end

function AECrafter:getCrafter(recipeName)
    return self.recipeDB[self:getIndex(recipeName)]
end

function AECrafter:getIndex(recipeName)
    for i = 1, #self.recipeDB do
        local recipe = self.recipeDB[i].getItemStack() -- Recipe object at index i
        if recipe.label == recipeName then
            return i
        end
    end

    return nil
end

function AECrafter:getRecipes()
    return self.controller.getCraftables()
end

function AECrafter:setCpu()
    for i = 1, #self.cpuTable do
        local cpu = self.cpuTable[i] -- Crafting CPU object at index i
        if cpu[2] == false then
            return tostring(cpu[1])
        end
    end

    return nil
end

function initCpus(controller)
    return map(controller, function(cpu)
        if (type(cpu) == 'table') then
            return {cpu.name, cpu.busy}
        end
    end)
end

function initRecipes(controller)
    return controller.getCraftables()
end
